use crate::prelude::*;
use esprit2_server::protocol;

pub mod world;

pub enum State<'lua, 'texture> {
	Login(String),
	World(input::Mode<'lua>, world::State<'texture>),
}

impl<'lua, 'texture> State<'lua, 'texture> {
	pub(crate) fn world(
		address: Option<&str>,
		lua: &'lua mlua::Lua,
		textures: &'texture texture::Manager,
	) -> Self {
		// Create a console.
		// An internal server will send messages to it using a console::Handle.
		// An external server will send messages to it over TCP. (local messages generated by the world cache are discarded)
		let console = Console::default();

		// Create an internal server instance
		let server = if let Some(address) = address {
			ServerHandle::external(
				(address, protocol::DEFAULT_PORT),
				options::resource_directory().clone(),
			)
		} else {
			ServerHandle::internal(options::resource_directory().clone())
		};

		let mut soul_jar = gui::widget::SoulJar::new(textures).unwrap();
		// This disperses the souls enough to cause them to fly in from the sides
		// the same effect can be seen if a computer is put to sleep and then woken up.
		soul_jar.tick(5.0);
		let cloudy_wave = draw::CloudyWave::default();
		let pamphlet = gui::widget::Pamphlet::new();

		// TODO: Make this part of input::Mode::Select;
		let chase_point = None;

		if let ServerHandle::Internal { .. } = server {
			lua.globals()
				.set("Console", console::LuaHandle(console.handle.clone()))
				.unwrap();
		} else {
			lua.globals()
				.set("Console", console::LuaHandle(console_impl::Dummy))
				.unwrap();
		}
		lua.globals()
			.set("Status", server.resources().statuses_handle())
			.unwrap();
		lua.globals()
			.set("Heuristic", consider::HeuristicConstructor)
			.unwrap();
		lua.globals().set("Log", combat::LogConstructor).unwrap();
		lua.globals()
			.set("Input", input::RequestConstructor)
			.unwrap();

		Self::World(
			input::Mode::Normal,
			world::State {
				server,
				console,
				soul_jar,
				cloudy_wave,
				pamphlet,
				chase_point,
			},
		)
	}
}
